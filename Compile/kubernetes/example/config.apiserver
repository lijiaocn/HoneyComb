declare -A CONFIGS
# Ordered list of plug-ins to do admission control of resources into cluster. Comma-delimited list of: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DenyEscalatingExec, DenyExecOnPrivileged, InitialResources, LimitRanger, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, PersistentVolumeLabel, ResourceQuota, SecurityContextDeny, ServiceAccount
#CONFIGS[admission-control]='--admission-control="AlwaysAdmit"'
# File with admission control configuration.
#CONFIGS[admission-control-config-file]='--admission-control-config-file=""'
# The IP address on which to advertise the apiserver to members of the cluster. This address must be reachable by the rest of the cluster. If blank, the --bind-address will be used. If --bind-address is unspecified, the host's default interface will be used.
CONFIGS[advertise-address]='--advertise-address=192.168.40.99'
# If true, allow privileged containers.
CONFIGS[allow-privileged]='--allow-privileged=false'
# log to standard error as well as files
CONFIGS[alsologtostderr]='--alsologtostderr=false'
# The number of apiservers running in the cluster
CONFIGS[apiserver-count]='--apiserver-count=1'
# Ordered list of plug-ins to do authorization on secure port. Comma-delimited list of: AlwaysAllow,AlwaysDeny,ABAC
CONFIGS[authorization-mode]='--authorization-mode=AlwaysAllow'
# File with authorization policy in csv format, used with CONFIGS[authorization-mode]='--authorization-mode=ABAC, on the secure port.'
#CONFIGS[authorization-policy-file]='--authorization-policy-file=""'
# If set, the file that will be used to admit requests to the secure port of the API server via http basic authentication.
#CONFIGS[basic-auth-file]='--basic-auth-file=""'
# The IP address on which to listen for the --secure-port port. The associated interface(s) must be reachable by the rest of the cluster, and by CLI/web clients. If blank, all interfaces will be used (0.0.0.0).
CONFIGS[bind-address]='--bind-address=192.168.40.99'
# The directory where the TLS certs are located (by default /var/run/kubernetes). If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored.
CONFIGS[cert-dir]='--cert-dir="/var/run/kubernetes"'
# If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.
CONFIGS[client-ca-file]='--client-ca-file=../../../../AuthnAuthz/authn/ca/ca.pem'
# The path to the cloud provider configuration file.  Empty string for no configuration file.
#CONFIGS[cloud-config]='--cloud-config='
# The provider for cloud services.  Empty string for no provider.
#CONFIGS[cloud-provider]='--cloud-provider='
# List of allowed origins for CORS, comma separated.  An allowed origin can be a regular expression to support subdomain matching.  If this list is empty CORS will not be enabled.
#CONFIGS[cors-allowed-origins]='--cors-allowed-origins=""'
# The prefix for all resource paths in etcd.
CONFIGS[etcd-prefix]='--etcd-prefix="/kubernetes/apiserver/registry"'
# List of etcd servers to watch (http://ip:port), comma separated. Mutually exclusive with -etcd-config
CONFIGS[etcd-servers]='--etcd-servers=http://localhost:2379'
# Per-resource etcd servers overrides, comma separated. The individual override format: group/resource#servers, where servers are http://ip:port, semicolon separated.
#CONFIGS[etcd-servers-overrides]='--etcd-servers-overrides='
# Amount of time to retain events. Default 1 hour.
CONFIGS[event-ttl]='--event-ttl=1h0m0s'
# If passed, activates the keystone authentication plugin
#CONFIGS[experimental-keystone-url]='--experimental-keystone-url=""'
# The hostname to use when generating externalized URLs for this master (e.g. Swagger API Docs.)
#CONFIGS[external-hostname]='--external-hostname=""'
# if non-empty, httptest.NewServer serves on this address and blocks
#CONFIGS[httptest.serve]='--httptest.serve=""'
# The IP address on which to serve the --insecure-port (set to 0.0.0.0 for all interfaces). Defaults to localhost.
CONFIGS[insecure-bind-address]='--insecure-bind-address=192.168.40.99'
# The port on which to serve unsecured, unauthenticated access. Default 8080. It is assumed that firewall rules are set up such that this port is not reachable from outside of the cluster and that port 443 on the cluster's public address is proxied to this port. This is performed by nginx in the default setup.
CONFIGS[insecure-port]='--insecure-port=8080'
# Data source used by InitialResources. Supported options: influxdb, gcm.
CONFIGS[ir-data-source]='--ir-data-source="influxdb"'
# InfluxDB database name which contains metrics requred by InitialResources
CONFIGS[ir-dbname]='--ir-dbname="k8s"'
#8080/api/v1/proxy/namespaces/kube-system/services/monitoring-influxdb:api": Address of InfluxDB which contains metrics requred by InitialResources
CONFIGS[ir-influxdb-host]='--ir-influxdb-host="localhost'
# Whether the estimation should be made only based on data from the same namespace.
CONFIGS[ir-namespace-only]='--ir-namespace-only=false'
# Password used for connecting to InfluxDB
CONFIGS[ir-password]='--ir-password="root"'
# Which percentile of samples should InitialResources use when estimating resources. For experiment purposes.
CONFIGS[ir-percentile]='--ir-percentile=90'
# User used for connecting to InfluxDB
CONFIGS[ir-user]='--ir-user="root"'
# Path to a cert. file for the certificate authority.
CONFIGS[kubelet-certificate-authority]='--kubelet-certificate-authority=../../../../AuthnAuthz/kubelets/ca/ca-key.pem'
# Path to a client cert file for TLS.
CONFIGS[kubelet-client-certificate]='--kubelet-client-certificate=../../../../AuthnAuthz/kubelets/kubelets/192.168.40.99/Cert/cert.pem'
# Path to a client key file for TLS.
CONFIGS[kubelet-client-key]='--kubelet-client-key=../../../../AuthnAuthz/kubelets/kubelets/192.168.40.99/Cert/key.pem'
# Use https for kubelet connections
CONFIGS[kubelet-https]='--kubelet-https=true'
# Timeout for kubelet operations
CONFIGS[kubelet-timeout]='--kubelet-timeout=5s'
# If non-zero, the Kubernetes master service (which apiserver creates/maintains) will be of type NodePort, using this as the value of the port. If zero, the Kubernetes master service will be of type ClusterIP.
CONFIGS[kubernetes-service-node-port]='--kubernetes-service-node-port=0'
#0: when logging hits line file:N, emit a stack trace
#CONFIGS[log-backtrace-at]='--log-backtrace-at='
# If non-empty, write log files in this directory
CONFIGS[log-dir]='--log-dir=./log/'
# Maximum number of seconds between log flushes
CONFIGS[log-flush-frequency]='--log-flush-frequency=5s'
# log to standard error instead of files
CONFIGS[logtostderr]='--logtostderr=true'
# A regular expression matching long running requests which should be excluded from maximum inflight request handling.
CONFIGS[long-running-request-regexp]='--long-running-request-regexp="(/|^)((watch|proxy)(/|$)|(logs?|portforward|exec|attach)/?$)"'
# The namespace from which the kubernetes master services should be injected into pods
CONFIGS[master-service-namespace]='--master-service-namespace="default"'
# If non-zero, throttle each user connection to this number of bytes/sec.  Currently only applies to long-running requests
CONFIGS[max-connection-bytes-per-sec]='--max-connection-bytes-per-sec=0'
# The maximum number of requests in flight at a given time.  When the server exceeds this, it rejects requests.  Zero for no limit.
CONFIGS[max-requests-inflight]='--max-requests-inflight=400'
# An optional field indicating the minimum number of seconds a handler must keep a request open before timing it out. Currently only honored by the watch request handler, which picks a randomized value above this number as the connection timeout, to spread out load.
CONFIGS[min-request-timeout]='--min-request-timeout=1800'
# If set, the OpenID server's certificate will be verified by one of the authorities in the oidc-ca-file, otherwise the host's root CA set will be used
#CONFIGS[oidc-ca-file]='--oidc-ca-file=""'
# The client ID for the OpenID Connect client, must be set if oidc-issuer-url is set
#CONFIGS[oidc-client-id]='--oidc-client-id=""'
# The URL of the OpenID issuer, only HTTPS scheme will be accepted. If set, it will be used to verify the OIDC JSON Web Token (JWT)
#CONFIGS[oidc-issuer-url]='--oidc-issuer-url=""'
# The OpenID claim to use as the user name. Note that claims other than the default ('sub') is not guaranteed to be unique and immutable. This flag is experimental, please see the authentication documentation for further details.
CONFIGS[oidc-username-claim]='--oidc-username-claim="sub"'
# Enable profiling via web interface host:port/debug/pprof/
CONFIGS[profiling]='--profiling=true'
# If true, server will do its best to fix the update request to pass the validation, e.g., setting empty UID in update request to its existing value. This flag can be turned off after we fix all the clients that send malformed updates.
CONFIGS[repair-malformed-updates]='--repair-malformed-updates=true'
# A set of key=value pairs that describe runtime configuration that may be passed to apiserver. apis/<groupVersion> key can be used to turn on/off specific api versions. apis/<groupVersion>/<resource> can be used to turn on/off specific resources. api/all and api/legacy are special keys to control all and legacy api versions respectively.
#CONFIGS[runtime-config]='--runtime-config='
# The port on which to serve HTTPS with authentication and authorization. If 0, don't serve HTTPS at all.
CONFIGS[secure-port]='--secure-port=6443'
# File containing PEM-encoded x509 RSA private or public key, used to verify ServiceAccount tokens. If unspecified, --tls-private-key-file is used.
CONFIGS[service-account-key-file]='--service-account-key-file=../../../../AuthnAuthz/serviceAccount/ca/ca.pem'
# If true, validate ServiceAccount tokens exist in etcd as part of authentication.
CONFIGS[service-account-lookup]='--service-account-lookup=false'
# A CIDR notation IP range from which to assign service cluster IPs. This must not overlap with any IP ranges assigned to nodes for pods.
CONFIGS[service-cluster-ip-range]='--service-cluster-ip-range=172.16.0.0/17'
# A port range to reserve for services with NodePort visibility.  Example: '30000-32767'.  Inclusive at both ends of the range.
CONFIGS[service-node-port-range]='--service-node-port-range=30000-32767'
# If non-empty, use secure SSH proxy to the nodes, using this user keyfile
#CONFIGS[ssh-keyfile]='--ssh-keyfile=""'
# If non-empty, use secure SSH proxy to the nodes, using this user name
#CONFIGS[ssh-user]='--ssh-user=""'
# logs at or above this threshold go to stderr
CONFIGS[stderrthreshold]='--stderrthreshold=2'
# The versions to store resources with. Different groups may be stored in different versions. Specified in the format "group1/version1,group2/version2...". This flag expects a complete list of storage versions of ALL groups registered in the server. It defaults to a list of preferred versions of all registered groups, which is derived from the KUBE_API_VERSIONS environment variable.
#CONFIGS[storage-versions]='--storage-versions="authorization.k8s.io/v1beta1,componentconfig/v1alpha1,extensions/v1beta1,metrics/v1alpha1,v1"'
#CONFIGS[storage-versions]='--storage-versions="v2"'
# File containing x509 Certificate for HTTPS.  (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes.
CONFIGS[tls-cert-file]='--tls-cert-file=../../../../AuthnAuthz/apiserver/apiservers/192.168.40.99/Cert/cert.pem'
# File containing x509 private key matching --tls-cert-file.
CONFIGS[tls-private-key-file]='--tls-private-key-file=../../../../AuthnAuthz/apiserver/apiservers/192.168.40.99/Cert/key.pem'
# If set, the file that will be used to secure the secure port of the API server via token authentication.
#CONFIGS[token-auth-file]='--token-auth-file=""'
# log level for V logs
CONFIGS[v]='--v=0'
# Print version information and quit
CONFIGS[version]='--version=false'
# comma-separated list of pattern=N settings for file-filtered logging
#CONFIGS[vmodule]='--vmodule='
# Enable watch caching in the apiserver
CONFIGS[watch-cache]='--watch-cache=true'
